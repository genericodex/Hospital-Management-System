<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">

<ui:composition template="/template.xhtml">
    <ui:define name="title">Audit Logs</ui:define>

    <ui:define name="head">
        <!-- Add Chart.js library -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </ui:define>
    <ui:define name="content">
        <div class="bg-white rounded-lg shadow-lg p-8 max-w-9xl mx-auto mt-6">
            <h2 class="text-2xl font-bold mb-4 text-green-700">System Audit Logs</h2>
            <h:form id="auditLogForm">
                <p:remoteCommand name="loadChart"
                                 actionListener="#{auditLogBean.loadChartData}"
                                 autoRun="true" />
                <!-- Chart Panel -->
                <!-- Chart Row -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                    <!-- User Interactivity Chart Panel -->
                    <p:panel header="User Interactivity" styleClass="!border-0 !shadow-lg rounded-lg">
                        <div class="relative" style="height: 400px;">
                            <canvas id="userActivityChart"></canvas>
                        </div>
                    </p:panel>

                    <!-- Action Type Breakdown Chart Panel -->
                    <p:panel header="Action Type Breakdown" styleClass="!border-0 !shadow-lg rounded-lg">
                        <div class="relative" style="height: 400px;">
                            <canvas id="actionTypeChart"></canvas>
                        </div>
                    </p:panel>
                </div>
                <p:panel>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                        <p:outputLabel for="entityFilter" value="Filter by Entity:" styleClass="block text-gray-700 text-sm font-bold mb-2"/>
                        <p:inputText id="entityFilter" value="#{auditLogBean.selectedEntity}" styleClass="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"/>
                    </div>
                    <div>
                        <p:outputLabel for="actionFilter" value="Filter by Action Type:" styleClass="block text-gray-700 text-sm font-bold mb-2"/>
                        <p:inputText id="actionFilter" value="#{auditLogBean.selectedActionType}" styleClass="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"/>
                    </div>
                    <div>
                        <p:outputLabel for="staffFilter" value="Filter by Staff/Doctor:" styleClass="block text-gray-700 text-sm font-bold mb-2"/>
                        <p:inputText id="staffFilter" value="#{auditLogBean.selectedStaffName}" styleClass="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"/>
                    </div>
                    <div>
                        <p:outputLabel for="startDateFilter" value="Start Date:" styleClass="block text-gray-700 text-sm font-bold mb-2"/>
                        <p:calendar id="startDateFilter" value="#{auditLogBean.startDate}" pattern="yyyy-MM-dd" showOn="button" styleClass="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" converter="localDateTimeConverter"/>
                    </div>
                    <div>
                        <p:outputLabel for="endDateFilter" value="End Date:" styleClass="block text-gray-700 text-sm font-bold mb-2"/>
                        <p:calendar id="endDateFilter" value="#{auditLogBean.endDate}" pattern="yyyy-MM-dd" showOn="button" styleClass="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" converter="localDateTimeConverter"/>
                    </div>
                </div>
                <div class="mb-4">
                    <p:commandButton value="Apply Filters" action="#{auditLogBean.filterAuditLogs}" update="auditLogTable"
                                     styleClass="!bg-green-600 hover:!bg-green-500 !border-green-500 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"/>
                    <span style="display:inline-block; width:0.75rem;"/>

                    <p:commandButton value="Clear Filters" action="#{auditLogBean.clearFilters}" update="auditLogTable entityFilter actionFilter staffFilter startDateFilter endDateFilter"
                                     styleClass="!bg-gray-100 hover:!bg-gray-200 border !border-gray-300 !text-black font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ml-2"/>
                </div>
                <div style="width:100%; overflow-x:auto;">
                    <p:dataTable id="auditLogTable" var="log" value="#{auditLogBean.auditLogs}"
                                 paginator="true" rows="5" emptyMessage="No audit logs found"
                                 style="min-width:1200px;" styleClass="min-w-full divide-y divide-gray-200 text-sm rounded-lg
                                 overflow-hidden shadow" paginatorPosition="bottom" rowsPerPageTemplate="5,10,15,50,100">
                        <p:column headerText="Timestamp" sortBy="#{log.timestamp}">
                            <h:outputText value="#{log.timestamp}">
                                <f:convertDateTime type="localDateTime" pattern="yyyy-MM-dd HH:mm:ss"/>
                            </h:outputText>
                        </p:column>
                        <p:column headerText="Staff">
                            <h:outputText value="#{log.staffName}"/>
                        </p:column>
                        <p:column headerText="Action">
                            <h:outputText value="#{log.actionType}"/>
                        </p:column>
                        <p:column headerText="Entity">
                            <h:outputText value="#{log.entityName}"/>
                        </p:column>
                        <p:column headerText="Entity ID">
                            <h:outputText value="#{log.entityId}"/>
                        </p:column>
                        <p:column headerText="Old Value" style="max-width:5000px; min-width:300px; white-space:pre-wrap; word-break:break-all;">
                            <h:outputText value="#{log.oldValue}" style="white-space:pre-wrap; word-break:break-all;"/>
                        </p:column>
                        <p:column headerText="New Value" style="max-width:1200px; min-width:300px; white-space:pre-wrap; word-break:break-all;">
                            <h:outputText value="#{log.newValue}" style="white-space:pre-wrap; word-break:break-all;"/>
                        </p:column>
                        <p:column headerText="Diff" style="max-width:1200px; min-width:300px; white-space:pre-wrap; word-break:break-all; color: #333;">
                            <h:outputText value="#{log.diff}" style="white-space:pre-wrap; word-break:break-all;"/>
                        </p:column>
                    </p:dataTable>
                </div>
                </p:panel>
            </h:form>
        </div>
        <h:outputScript>
            // Main function to initialize all charts on this page
            function renderAuditChart(userActivityData, actionTypeData) {
                renderUserActivityChart(userActivityData);
                renderActionTypeChart(actionTypeData);
            }

            // Renders the horizontal bar chart for user activity
            function renderUserActivityChart(data) {
                if (!data || data.length === 0) return;
                const canvas = document.getElementById('userActivityChart');
                if (!canvas) return;

                 const ctx = canvas.getContext('2d');
                const labels = data.map(item => item.staffName);
                const counts = data.map(item => item.count);

                 if (window.userActivityBarChart) window.userActivityBarChart.destroy();

                 window.userActivityBarChart = new Chart(ctx, {
                     type: 'bar',
                     data: {
                         labels: labels,
                         datasets: [{
                             label: 'Number of Actions',
                             data: counts,
                             backgroundColor: 'rgba(96, 165, 250, 0.5)', // Tailwind blue-400
                             borderColor: 'rgb(59, 130, 246)',      // Tailwind blue-500
                             borderWidth: 1
                         }]
                     },
                     options: {
                         indexAxis: 'y',
                         responsive: true,
                         maintainAspectRatio: false
                     }
                 });
            }

            // Renders the doughnut chart for action types
            function renderActionTypeChart(data) {
                if (!data || data.length === 0) return;
                const canvas = document.getElementById('actionTypeChart');
                if (!canvas) return;

                 const ctx = canvas.getContext('2d');
                const labels = data.map(item => item.action);
                const counts = data.map(item => item.count);

                 if (window.actionTypeDoughnutChart) window.actionTypeDoughnutChart.destroy();

                 window.actionTypeDoughnutChart = new Chart(ctx, {
                     type: 'doughnut',
                     data: {
                         labels: labels,
                         datasets: [{
                             label: 'Action Types',
                             data: counts,
                             backgroundColor: [
                                 'rgba(52, 211, 153, 0.7)',  // green-400
                                 'rgba(251, 191, 36, 0.7)',  // amber-400
                                 'rgba(239, 68, 68, 0.7)',   // red-500
                                 'rgba(168, 85, 247, 0.7)',  // purple-500
                                 'rgba(14, 165, 233, 0.7)'   // sky-500
                             ],
                             hoverOffset: 4
                         }]
                     },
                     options: {
                         responsive: true,
                         maintainAspectRatio: false
                     }
                 });
            }
        </h:outputScript>
    </ui:define>
</ui:composition>
</html>
